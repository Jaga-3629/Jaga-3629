class Node:  
    def __init__(self,data):  
        #Assign data to the new node, set left and right children to None  
        self.data = data;  
        self.left = None;  
        self.right = None;  
   
class BinaryTree:  
    def __init__(self):  
        #Represent the root of binary tree  
        self.root = None;  
      
    #findHeight() will determine the maximum height of the binary tree  
    def findHeight(self, temp):  
        #Check whether tree is empty  
        if(self.root == None):  
            print("Tree is empty");  
            return 0;  
        else:  
            leftHeight = 0;  
            rightHeight = 0;  
              
            #Calculate the height of left subtree  
            if(temp.left != None):  
                leftHeight = self.findHeight(temp.left);  
                  
            #Calculate the height of right subtree  
            if(temp.right != None):  
                rightHeight = self.findHeight(temp.right);  
              
            #Compare height of left subtree and right subtree   
            #and store maximum of two in variable max  
            maximum = leftHeight if (leftHeight > rightHeight) else rightHeight;  
              
            #Calculate the total height of the tree by adding the height of the root  
            return (maximum + 1);  
   
bt = BinaryTree();  
#Add nodes to the binary tree  
bt.root = Node(1);  
bt.root.left = Node(2);  
bt.root.right = Node(3);  
bt.root.left.left = Node(4);  
bt.root.right.left = Node(5);  
bt.root.right.right = Node(6);  
bt.root.right.right.right= Node(7);  
bt.root.right.right.right.right = Node(8);  
   
#Display the maximum height of the given binary tree  
print("Maximum height of given binary tree: " + str(bt.findHeight(bt.root))); 
